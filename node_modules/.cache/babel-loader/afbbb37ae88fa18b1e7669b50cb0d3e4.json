{"ast":null,"code":"import axios from \"axios\";\nconst initialState = {\n  signupLoading: false,\n  signupDone: false,\n  signupError: null,\n  isLoggedIn: false,\n  myInfo: null\n};\nconst SIGNUP_REQUEST = \"SIGNUP_REQUEST\";\nconst SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\";\nconst SINGUP_FAILURE = \"SIGNUP_FAILURE\";\n\nconst signupAPI = async formData => {\n  const req = await axios.post(\"http://localhost:3065/user/signup\", formData);\n  return req;\n};\n\nexport const signupReq = formData => async dispatch => {\n  dispatch({\n    type: SIGNUP_REQUEST\n  });\n\n  try {\n    const req = await signupAPI(formData);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      signupInfo: req.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SINGUP_FAILURE,\n      signupError: err\n    });\n  }\n};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SIGNUP_REQUEST:\n      return { ...state,\n        signupLoading: true,\n        signupError: null,\n        signupDone: false\n      };\n\n    case SIGNUP_SUCCESS:\n      return { ...state,\n        signupLoading: false,\n        signupDone: true,\n        signupInfo: action.signupInfo\n      };\n\n    case SINGUP_FAILURE:\n      return { ...state,\n        signupLoading: false,\n        signupError: action.signupError\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ljh/Desktop/soloProject/community/src/reducer/user.js"],"names":["axios","initialState","signupLoading","signupDone","signupError","isLoggedIn","myInfo","SIGNUP_REQUEST","SIGNUP_SUCCESS","SINGUP_FAILURE","signupAPI","formData","req","post","signupReq","dispatch","type","signupInfo","data","err","reducer","state","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,WAAW,EAAE,IAHM;AAInBC,EAAAA,UAAU,EAAE,KAJO;AAKnBC,EAAAA,MAAM,EAAE;AALW,CAArB;AAQA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,MAAMC,SAAS,GAAG,MAAOC,QAAP,IAAoB;AACpC,QAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,mCAAX,EAAgDF,QAAhD,CAAlB;AACA,SAAOC,GAAP;AACD,CAHD;;AAKA,OAAO,MAAME,SAAS,GAAIH,QAAD,IAAc,MAAOI,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMK,GAAG,GAAG,MAAMF,SAAS,CAACC,QAAD,CAA3B;AACAI,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,cADC;AAEPS,MAAAA,UAAU,EAAEL,GAAG,CAACM;AAFT,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,cADC;AAEPL,MAAAA,WAAW,EAAEe;AAFN,KAAD,CAAR;AAID;AACF,CAdM;AAgBP,eAAe,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBpB,YAAsB;AAAA,MAARqB,MAAQ;;AAC5D,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKT,cAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELnB,QAAAA,aAAa,EAAE,IAFV;AAGLE,QAAAA,WAAW,EAAE,IAHR;AAILD,QAAAA,UAAU,EAAE;AAJP,OAAP;;AAMF,SAAKK,cAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELnB,QAAAA,aAAa,EAAE,KAFV;AAGLC,QAAAA,UAAU,EAAE,IAHP;AAILc,QAAAA,UAAU,EAAEK,MAAM,CAACL;AAJd,OAAP;;AAMF,SAAKR,cAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELnB,QAAAA,aAAa,EAAE,KAFV;AAGLE,QAAAA,WAAW,EAAEkB,MAAM,CAAClB;AAHf,OAAP;;AAKF;AACE,aAAOiB,KAAP;AAtBJ;AAwBD","sourcesContent":["import axios from \"axios\";\n\nconst initialState = {\n  signupLoading: false,\n  signupDone: false,\n  signupError: null,\n  isLoggedIn: false,\n  myInfo: null,\n};\n\nconst SIGNUP_REQUEST = \"SIGNUP_REQUEST\";\nconst SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\";\nconst SINGUP_FAILURE = \"SIGNUP_FAILURE\";\n\nconst signupAPI = async (formData) => {\n  const req = await axios.post(\"http://localhost:3065/user/signup\", formData);\n  return req;\n};\n\nexport const signupReq = (formData) => async (dispatch) => {\n  dispatch({ type: SIGNUP_REQUEST });\n  try {\n    const req = await signupAPI(formData);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      signupInfo: req.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: SINGUP_FAILURE,\n      signupError: err,\n    });\n  }\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case SIGNUP_REQUEST:\n      return {\n        ...state,\n        signupLoading: true,\n        signupError: null,\n        signupDone: false,\n      };\n    case SIGNUP_SUCCESS:\n      return {\n        ...state,\n        signupLoading: false,\n        signupDone: true,\n        signupInfo: action.signupInfo,\n      };\n    case SINGUP_FAILURE:\n      return {\n        ...state,\n        signupLoading: false,\n        signupError: action.signupError,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}